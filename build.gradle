plugins {

    id "org.jetbrains.kotlin.jvm" version "1.3.40"
    id "idea"
}

version = "19.3.0"

repositories {
    jcenter()
    maven { url = "http://devsite.ctr-electronics.com/maven/release/" }
    maven { url = "http://first.wpi.edu/FRC/roborio/maven/release" }
    mavenLocal()
}

dependencies {
    // FRC libs
    compile "edu.wpi.first.wpilibj:wpilibj-java:2019.1.1"
    compile "edu.wpi.first.ntcore:ntcore-java:2019.1.1"
    compile "edu.wpi.first.cscore:cscore-java:2019.1.1"
    compile "edu.wpi.first.thirdparty.frc2019.opencv:opencv-java:3.4.4-4"

    // Vendor libs
    compile "com.ctre.phoenix:api-java:5.12.1"
    compile "com.ctre.phoenix:wpiapi-java:5.12.1"

    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"

    // App
    compile "org.jline:jline:3.9.0"
    compile 'net.consensys.cava:cava-toml:0.5.0'
    compile "org.strykeforce.thirdcoast:telemetry:${thirdcoast_version}"
    compile "org.strykeforce.thirdcoast:swerve:${thirdcoast_version}"

    // Logging
    compile 'io.github.microutils:kotlin-logging:1.6.10'
    compile 'ch.qos.logback:logback-classic:1.2.3'

    // Koin
    compile "org.koin:koin-core:$koin_version"
    compile "org.koin:koin-logger-slf4j:${koin_version}"
    testCompile "org.koin:koin-test:${koin_version}"

    // Testing
    testCompile "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testCompile "org.junit.jupiter:junit-jupiter-params:${junit_version}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
    testCompile "org.assertj:assertj-core:3.11.1"
    testCompile "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"

}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-progressive"]
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-progressive"]
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }
}

def robotManifest = {
    attributes 'Main-Class': 'org.strykeforce.thirdcoast.MainKt',
            'Robot-Class': 'org.strykeforce.thirdcoast.Robot',
            'Specification-Title': 'Third Coast Telemetry',
            'Specification-Version': "${thirdcoast_version}",
            'Implementation-Title': 'Third Coast Telemetry Utility (tct)',
            'Implementation-Version': version
}

jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest robotManifest
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
