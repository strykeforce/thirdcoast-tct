buildscript {
    ext {
        kotlin_version = '1.2.71'
        junit_version = '5.2.0'
        koin_version = '1.0.1'
    }

    repositories {
        jcenter()
        maven { url = "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: "kotlin"
apply plugin: "idea"

version = '18.2.0'

repositories {
    jcenter()
    maven { url = "https://raw.githubusercontent.com/Open-RIO/Maven-Mirror/master/m2" }
    maven { url = "http://first.wpi.edu/FRC/roborio/maven/release" }
}

dependencies {
    // FRC libs
    compile 'openrio.mirror.third.ctre:CTRE-phoenix-java:5.7.1.0'
    compile "edu.wpi.first.wpilibj:wpilibj-java:2018.4.1"
    compile "edu.wpi.first.ntcore:ntcore-java:4.1.0"
    compile "edu.wpi.first.cscore:cscore-java:1.3.0"
    compile "org.opencv:opencv-java:3.2.0"
    
    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    
    // App
    compile "org.jline:jline:3.9.0"
    compile 'net.consensys.cava:cava-toml:0.3.1'
    
    // Logging
    compile 'io.github.microutils:kotlin-logging:1.5.9'
    compile 'ch.qos.logback:logback-classic:1.2.3'

    // Koin
    compile "org.koin:koin-core:$koin_version"
    compile "org.koin:koin-logger-slf4j:$koin_version"
    testCompile "org.koin:koin-test:$koin_version"

    // Testing
    testCompile "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    testCompile "org.assertj:assertj-core:3.11.1"
    testCompile 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0-RC2'

}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }
}

def robotManifest = {
    attributes 'Main-Class': 'edu.wpi.first.wpilibj.RobotBase',
            'Robot-Class': 'org.strykeforce.thirdcoast.Robot',
            'Specification-Title': 'Third Coast Telemetry',
            'Specification-Version': version,
            'Implementation-Title': 'Third Coast Telemetry Utility (tct)',
            'Implementation-Version': version
}

jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest robotManifest
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}