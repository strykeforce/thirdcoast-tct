type = "menu"
[talon]
  type = "menu"
  order = 10
  menu = "work with talonSRXs"
  [talon.run]
    type = "talon.run"
    order = 5
    menu = "run active talons"
    device = "srx"
  [talon.select]
    type = "talon.select"
    order = 10
    menu = "active talons"
    device = "srx"
  [talon.status]
    type = "talon.status"
    order = 12
    menu = "status of active talons"
    device = "srx"
  [talon.mode]
    type = "talon.mode"
    order = 15
    menu = "control mode"
    device = "srx"
    help = "The output mode to apply. In PercentOutput, the output is between -1.0 and 1.0, with 0.0 as stopped. In Current mode, output value is in amperes. In Velocity mode, output value is in position change / 100ms. In Position mode, output value is in encoder ticks or an analog value, depending on the sensor. In Follower mode, the output value is the integer device ID of the talon to duplicate."
  [talon.sensor]
    type = "menu"
    order = 17
    menu = "configure feedback sensors"
    device = "srx"
    [talon.sensor.primary]
      type = "talon.sensor"
      order = 10
      menu = "primary closed-loop sensor"
      pid = 0
      device = "srx"
      help = "Sensors for motor controllers provide feedback about the position, velocity, and acceleration of the system using that motor controller."
    [talon.sensor.auxiliary]
      type = "talon.sensor"
      order = 20
      menu = "auxiliary closed-loop sensor"
      pid = 1
      device = "srx"
      help = "Sensors for motor controllers provide feedback about the position, velocity, and acceleration of the system using that motor controller."
    [talon.sensor.primary_position]
      type = "talon.sensor.position"
      order = 30
      menu = "primary sensor feedback position"
      param = "SENSOR_POSITION"
      pid = 0
      device = "srx"
    [talon.sensor.auxiliary_position]
      type = "talon.sensor.position"
      order = 40
      menu = "auxiliary sensor feedback position"
      param = "SENSOR_POSITION"
      pid = 1
      device = "srx"
    [talon.sensor.primary_coefficient]
      type = "talon.sensor.coefficient"
      order = 50
      menu = "primary sensor feedback coefficient"
      param = "FEEDBACK_COEFFICIENT"
      pid = 0
      device = "srx"
    [talon.sensor.auxiliary_coefficient]
      type = "talon.sensor.coefficient"
      order = 60
      menu = "auxiliary sensor feedback coefficient"
      param = "FEEDBACK_COEFFICIENT"
      pid = 1
      device = "srx"
    [talon.sensor.phase]
      type = "talon.param"
      order = 70
      menu = "sensor phase reversed"
      param = "SENSOR_PHASE"
      device = "srx"
  [talon.slot]
    type = "menu"
    order = 20
    menu = "configure PID slots"
    device = "srx"
    [talon.slot.select]
      type = "talon.slot.select"
      order = 10
      menu = "active slot"
      device = "srx"
      help = "The Talon SRX supports up to 4 PIDF Slots, each with a unique set of gains that are stored persistently across power cycles. "
    [talon.slot.P]
      type ="talon.param"
      order = 20
      param = "SLOT_P"
      device = "srx"
    [talon.slot.I]
      type ="talon.param"
      order = 30
      param = "SLOT_I"
      device = "srx"
    [talon.slot.D]
      type ="talon.param"
      order = 40
      param = "SLOT_D"
      device = "srx"
    [talon.slot.F]
      type ="talon.param"
      order = 50
      param = "SLOT_F"
      device = "srx"
    [talon.slot.IZone]
      type ="talon.param"
      menu = "I Zone"
      order = 60
      param = "SLOT_I_ZONE"
      device = "srx"
    [talon.slot.AllowableErr]
      type ="talon.param"
      menu = "Allowable Error"
      order = 70
      param = "SLOT_ALLOWABLE_ERR"
      device = "srx"
    [talon.slot.MaxIAccum]
      type ="talon.param"
      menu = "Max I Accum"
      order = 80
      param = "SLOT_MAX_I_ACCUM"
      device = "srx"
    [talon.slot.PeakOutput]
      type ="talon.param"
      menu = "Peak output"
      order = 90
      param = "SLOT_PEAK_OUTPUT"
      device = "srx"
  [talon.motion_magic]
    type = "menu"
    order = 22
    menu = "configure motion magic"
    device = "srx"
    [talon.motion_magic.cruise_velocity]
      type = "talon.param"
      order = 10
      menu = "motion magic cruise velocity"
      param = "MOTION_CRUISE_VELOCITY"
      device = "srx"
    [talon.motion_magic.acceleration]
      type = "talon.param"
      order = 20
      menu = "motion magic acceleration"
      param = "MOTION_ACCELERATION"
      device = "srx"
  [talon.current]
    type = "menu"
    order = 23
    menu = "configure current limits"
    [talon.current.enabled]
      type = "talon.param"
      order = 10
      menu = "current limit enabled"
      param = "CURRENT_LIMIT_ENABLE"
      device = "srx"
    [talon.current.continuous]
      type = "talon.param"
      order = 20
      menu = "continuous current limit"
      param = "CURRENT_LIMIT_CONT"
      device = "srx"
    [talon.current.peak]
      type = "talon.param"
      order = 30
      menu = "peak current limit"
      param = "CURRENT_LIMIT_PEAK"
      device = "srx"
    [talon.current.peak_duration]
      type = "talon.param"
      order = 40
      menu = "peak current limit duration"
      param = "CURRENT_LIMIT_PEAK_DURATION"
      device = "srx"
    [talon.current.supply_enabled]
      type = "talon.param"
      order = 50
      menu = "supply current: limit enabled"
      param = "SUPPLY_CURRENT_LIMIT_ENABLE"
      device = "srx"
    [talon.current.supply_limit]
      type = "talon.param"
      order = 60
      menu = "supply current: current limit (A)"
      param = "SUPPLY_CURRENT_LIMIT"
      device = "srx"
    [talon.current.supply_triggerCurrent]
      type = "talon.param"
      order = 70
      menu = "supply current: trigger current (A)"
      param = "SUPPLY_CURRENT_LIMIT_THRES_CURRENT"
      device = "srx"
      help = "current must exceed this threshold before limiting occurs. If this number is less than currentLimit, currentLimit is used as the threshold"
    [talon.current.supply_triggerTime]
      type = "talon.param"
      order = 80
      menu = "supply current: trigger time (s)"
      param = "SUPPLY_CURRENT_LIMIT_THRES_TIME"
      device = "srx"
      help = "current must exceed the threshold for this long before limiting occurs"
  [talon.output]
    type = "menu"
    order = 25
    menu = "configure motor output"
    [talon.output.brake]
      type = "talon.brake"
      order = 10
      menu = "brake mode"
      help = "Mode of operation during Neutral output, brake or coast."
      device = "srx"
    [talon.output.reversed]
      type = "talon.param"
      order = 20
      menu = "motor output reversed"
      param = "OUTPUT_REVERSED"
      device = "srx"
    [talon.output.open-loop_ramp]
      type = "talon.param"
      order = 30
      menu = "open-loop ramp rate"
      param = "OPEN_LOOP_RAMP"
      device = "srx"
    [talon.output.closed-loop_ramp]
      type = "talon.param"
      order = 40
      menu = "closed-loop ramp rate"
      param = "CLOSED_LOOP_RAMP"
      device = "srx"
    [talon.output.forward_peak_output]
      type = "talon.param"
      order = 50
      menu = "forward peak output"
      param = "PEAK_OUTPUT_FORWARD"
      device = "srx"
    [talon.output.reverse_peak_output]
      type = "talon.param"
      order = 60
      menu = "reverse peak output"
      param = "PEAK_OUTPUT_REVERSE"
      device = "srx"
    [talon.output.forward_nominal_output]
      type = "talon.param"
      order = 70
      menu = "forward nominal output"
      param = "NOMINAL_OUTPUT_FORWARD"
      device = "srx"
    [talon.output.reverse_nominal_output]
      type = "talon.param"
      order = 80
      menu = "reverse nominal output"
      param = "NOMINAL_OUTPUT_REVERSE"
      device = "srx"
    [talon.output.neutral_deadband]
      type = "talon.param"
      order = 90
      menu = "neutral deadband"
      param = "NEUTRAL_DEADBAND"
      device = "srx"
  [talon.velocity_measurement]
    type = "menu"
    order = 26
    menu = "configure velocity measurement"
    [talon.velocity_measurement.period]
      type = "talon.velocity.period"
      order = 10
      menu = "velocity measurement period"
      device = "srx"
    [talon.velocity_measurement.window]
      type = "talon.param"
      order = 20
      menu = "velocity measurement window"
      param = "VELOCITY_MEASUREMENT_WINDOW"
      device = "srx"
  [talon.voltage_compensation]
    type = "menu"
    order = 27
    menu = "configure voltage compensation"
    [talon.voltage_compensation.enabled]
      type = "talon.param"
      order = 10
      menu = "voltage compensation enabled"
      param = "VOLTAGE_COMP_ENABLE"
      device = "srx"
    [talon.voltage_compensation.saturation_voltage]
      type = "talon.param"
      order = 20
      menu = "voltage compensation saturation voltage"
      param = "VOLTAGE_COMP_SATURATION"
      device = "srx"
    [talon.voltage_compensation.filter]
      type = "talon.param"
      order = 30
      menu = "voltage compensation measurement filter"
      param = "VOLTAGE_MEASUREMENT_FILTER"
      device = "srx"
  [talon.frame]
    type = "menu"
    order = 60
    menu = "configure CAN bus frames"
    [talon.frame.grapher]
      type = "default"
      order = 10
      menu = "set grapher defaults"
      device = "srx"
    [talon.frame.general]
      type = "talon.param"
      order = 20
      menu = "general status frame"
      param = "STATUS_GENERAL"
      device = "srx"
    [talon.frame.feedback_0]
      type = "talon.param"
      order = 30
      menu = "feedback 0 status frame"
      param = "STATUS_FEEDBACK0"
      device = "srx"
    [talon.frame.quad_encoder]
      type = "talon.param"
      order = 40
      menu = "quad encoder status frame"
      param = "STATUS_QUAD_ENCODER"
      device = "srx"
    [talon.frame.ain_temp_vbat]
      type = "talon.param"
      order = 50
      menu = "ain/temp/vbat status frame"
      param = "STATUS_AIN_TEMP_VBAT"
      device = "srx"
    [talon.frame.pulse_width]
      type = "talon.param"
      order = 60
      menu = "pulse width status frame"
      param = "STATUS_PULSE_WIDTH"
      device = "srx"
    [talon.frame.motion]
      type = "talon.param"
      order = 70
      menu = "motion status frame"
      param = "STATUS_MOTION"
      device = "srx"
    [talon.frame.pidf_0]
      type = "talon.param"
      order = 80
      menu = "PIDF 0 status frame"
      param = "STATUS_PIDF0"
      device = "srx"
    [talon.frame.misc]
      type = "talon.param"
      order = 90
      menu = "Misc. status frame"
      param = "STATUS_MISC"
      device = "srx"
    [talon.frame.comm]
      type = "talon.param"
      order = 100
      menu = "Communication status frame"
      param = "STATUS_COMM"
      device = "srx"
    [talon.frame.motionBuff]
      type = "talon.param"
      order = 110
      menu = "Motion Profile Buffer status frame"
      param = "STATUS_MOTION_BUFF"
      device = "srx"
    [talon.frame.feedback1]
      type = "talon.param"
      order = 120
      menu = "Feedback1 status frame"
      param = "STATUS_FEEDBACK1"
      device = "srx"
    [talon.frame.pidf1]
      type = "talon.param"
      order = 130
      menu = "PIDF1 status frame"
      param = "STATUS_PIDF1"
      device = "srx"
    [talon.frame.firmware]
      type = "talon.param"
      order = 140
      menu = "Firmware and API status frame"
      param = "STATUS_FIRMWARE_API"
      device = "srx"
    [talon.frame.gadgeteer]
      type = "talon.param"
      order = 150
      menu = "UART Gadgeteer status frame"
      param = "STATUS_UART_GADGETEER"
      device = "srx"
  [talon.limit]
    type = "menu"
    order = 70
    menu = "configure soft and hard limits"
    [talon.limit.forward_hard_source]
      type = "talon.hard.source"
      order = 10
      forward = true
      menu = "forward hard limit source"
      device = "srx"
      help = "Select a limit switch source from the feedback connector, remote Talon SRX, CANifier, or deactivate the feature."
    [talon.limit.forward_hard_normal]
      type = "talon.hard.normal"
      order = 20
      forward = true
      menu = "forward hard limit normal"
      device = "srx"
      help = "Select whether this limit switch is normally open, normally closed, or disabled, which overrides the setting from the web-based configuration page."
    [talon.limit.reverse_hard_source]
      type = "talon.hard.source"
      order = 30
      forward = false
      menu = "reverse hard limit source"
      device = "srx"
      help = "Select a limit switch source from the feedback connector, remote Talon SRX, CANifier, or deactivate the feature."
    [talon.limit.reverse_hard_normal]
      type = "talon.hard.normal"
      order = 40
      forward = false
      menu = "reverse hard limit normal"
      device = "srx"
      help = "Select whether this limit switch is normally open, normally closed, or disabled, which overrides the setting from the web-based configuration page."
    [talon.limit.forward_soft_enabled]
      type = "talon.param"
      order = 50
      menu = "forward soft limit enabled"
      param = "SOFT_LIMIT_ENABLE_FORWARD"
      device = "srx"
    [talon.limit.forward_soft_threshold]
      type = "talon.param"
      order = 60
      menu = "forward soft limit threshold"
      param = "SOFT_LIMIT_THRESHOLD_FORWARD"
      device = "srx"
    [talon.limit.reverse_soft_enabled]
      type = "talon.param"
      order = 70
      menu = "reverse soft limit enabled"
      param = "SOFT_LIMIT_ENABLE_REVERSE"
      device = "srx"
    [talon.limit.reverse_soft_threshold]
      type = "talon.param"
      order = 80
      menu = "reverse soft limit threshold"
      param = "SOFT_LIMIT_THRESHOLD_REVERSE"
      device = "srx"
    # [talon.limit.forward_remote]
    #   type = "default"
    #   order = 90
    #   menu = "forward remote limit switch"
    # [talon.limit.reverse_remote]
    #   type = "default"
    #   order = 100
    #   menu = "reverse remote limit switch"
  [talon.factory_defaults]
    type = "talon.param"
    order = 80
    menu = "configure factory defaults"
    param = "FACTORY_DEFAULTS"
    device = "srx"

[talonFx]
  type = "menu"
  order = 15
  menu = "work with legacy talonFXs"
  [talonFx.run]
    type = "talon.run"
    order = 5
    menu = "run active talonFXs"
    device = "fx"
  [talonFx.select]
    type = "talon.select"
    order = 10
    menu = "active talonFXs"
    device = "fx"
  [talonFx.status]
    type = "talon.status"
    order = 12
    menu = "status of active talonFXs"
    device = "fx"
  [talonFx.mode]
    type = "talon.mode"
    order = 15
    menu = "control mode"
    device = "fx"
    help = "The output mode to apply. In PercentOutput, the output is between -1.0 and 1.0, with 0.0 as stopped. In Current mode, output value is in amperes. In Velocity mode, output value is in position change / 100ms. In Position mode, output value is in encoder ticks or an analog value, depending on the sensor. In Follower mode, the output value is the integer device ID of the talon to duplicate."
  [talonFx.sensor]
    type = "menu"
    order = 17
    menu = "configure feedback sensors"
    device = "fx"
    [talonFx.sensor.primary]
      type = "talon.sensor"
      order = 10
      menu = "primary closed-loop sensor"
      pid = 0
      device = "fx"
      help = "Sensors for motor controllers provide feedback about the position, velocity, and acceleration of the system using that motor controller."
    [talonFx.sensor.auxiliary]
      type = "talon.sensor"
      order = 20
      menu = "auxiliary closed-loop sensor"
      pid = 1
      device = "fx"
      help = "Sensors for motor controllers provide feedback about the position, velocity, and acceleration of the system using that motor controller."
    [talonFx.sensor.primary_position]
      type = "talon.sensor.position"
      order = 30
      menu = "primary sensor feedback position"
      param = "SENSOR_POSITION"
      pid = 0
      device = "fx"
    [talonFx.sensor.auxiliary_position]
      type = "talon.sensor.position"
      order = 40
      menu = "auxiliary sensor feedback position"
      param = "SENSOR_POSITION"
      pid = 1
      device = "fx"
    [talonFx.sensor.primary_coefficient]
      type = "talon.sensor.coefficient"
      order = 50
      menu = "primary sensor feedback coefficient"
      param = "FEEDBACK_COEFFICIENT"
      pid = 0
      device = "fx"
    [talonFx.sensor.auxiliary_coefficient]
      type = "talon.sensor.coefficient"
      order = 60
      menu = "auxiliary sensor feedback coefficient"
      param = "FEEDBACK_COEFFICIENT"
      pid = 1
      device = "fx"
    [talonFx.sensor.phase]
      type = "talon.param"
      order = 70
      menu = "sensor phase reversed"
      param = "SENSOR_PHASE"
      device = "fx"
    [talonFx.sensor.offset]
      type = "talon.param"
      order = 80
      menu = "integrated sensor offset degrees"
      param = "INTEGRATED_SENSOR_OFFSET_DEGREES"
      device = "fx"
    [talonFx.sensor.absolute_range]
      type = "talon.absoluteRange"
      order = 90
      menu = "absolute sensor range"
      device = "fx"
    [talonFx.sensor.initialization_strategy]
      type = "talon.initStrategy"
      order = 100
      menu = "integrated sensor initialization strategy"
      device = "fx"
  [talonFx.slot]
    type = "menu"
    order = 20
    menu = "configure PID slots"
    device = "fx"
    [talonFx.slot.select]
      type = "talon.slot.select"
      order = 10
      menu = "active slot"
      device = "fx"
      help = "The Talon FX supports up to 4 PIDF Slots, each with a unique set of gains that are stored persistently across power cycles. "
    [talonFx.slot.P]
      type ="talon.param"
      order = 20
      param = "SLOT_P"
      device = "fx"
    [talonFx.slot.I]
      type ="talon.param"
      order = 30
      param = "SLOT_I"
      device = "fx"
    [talonFx.slot.D]
      type ="talon.param"
      order = 40
      param = "SLOT_D"
      device = "fx"
    [talonFx.slot.F]
      type ="talon.param"
      order = 50
      param = "SLOT_F"
      device = "fx"
    [talonFx.slot.IZone]
      type ="talon.param"
      menu = "I Zone"
      order = 60
      param = "SLOT_I_ZONE"
      device = "fx"
    [talonFx.slot.AllowableErr]
      type ="talon.param"
      menu = "Allowable Error"
      order = 70
      param = "SLOT_ALLOWABLE_ERR"
      device = "fx"
    [talonFx.slot.MaxIAccum]
      type ="talon.param"
      menu = "Max I Accum"
      order = 80
      param = "SLOT_MAX_I_ACCUM"
      device = "fx"
    [talonFx.slot.PeakOutput]
      type = "talon.param"
      menu = "Peak output"
      order = 90
      param = "SLOT_PEAK_OUTPUT"
      device = "fx"
  [talonFx.motion_magic]
    type = "menu"
    order = 22
    menu = "configure motion magic"
    device = "fx"
    [talonFx.motion_magic.cruise_velocity]
      type = "talon.param"
      order = 10
      menu = "motion magic cruise velocity"
      param = "MOTION_CRUISE_VELOCITY"
      device = "fx"
    [talonFx.motion_magic.acceleration]
      type = "talon.param"
      order = 20
      menu = "motion magic acceleration"
      param = "MOTION_ACCELERATION"
      device = "fx"
  [talonFx.current]
    type = "menu"
    order = 23
    menu = "configure current limits"
    [talonFx.current.stator_enabled]
      type = "talon.param"
      order = 10
      menu = "stator current: limit enabled"
      param = "STATOR_CURRENT_LIMIT_ENABLE"
      device = "fx"
    [talonFx.current.stator_limit]
      type = "talon.param"
      order = 20
      menu = "stator current: current limit (A)"
      param = "STATOR_CURRENT_LIMIT"
      device = "fx"
    [talonFx.current.stator_triggerCurrent]
      type = "talon.param"
      order = 30
      menu = "stator current: trigger current (A)"
      param = "STATOR_CURRENT_LIMIT_THRES_CURRENT"
      device = "fx"
      help = "current must exceed this threshold before current limiting occurs. If this number is less than currentLimit than that limit is used as the threshold"
    [talonFx.current.stator_triggerTime]
      type = "talon.param"
      order = 40
      menu = "stator current: trigger time (s)"
      param = "STATOR_CURRENT_LIMIT_THRES_TIME"
      device = "fx"
      help = "current must exceed the threshold for this long before limiting occurs"
    [talonFx.current.supply_enabled]
      type = "talon.param"
      order = 50
      menu = "supply current: limit enabled"
      param = "SUPPLY_CURRENT_LIMIT_ENABLE"
      device = "fx"
    [talonFx.current.supply_limit]
      type = "talon.param"
      order = 60
      menu = "supply current: current limit (A)"
      param = "SUPPLY_CURRENT_LIMIT"
      device = "fx"
    [talonFx.current.supply_triggerCurrent]
      type = "talon.param"
      order = 70
      menu = "supply current: trigger current (A)"
      param = "SUPPLY_CURRENT_LIMIT_THRES_CURRENT"
      device = "fx"
      help = "current must exceed this threshold before limiting occurs. If this number is less than currentLimit, currentLimit is used as the threshold"
    [talonFx.current.supply_triggerTime]
      type = "talon.param"
      order = 80
      menu = "supply current: trigger time (s)"
      param = "SUPPLY_CURRENT_LIMIT_THRES_TIME"
      device = "fx"
      help = "current must exceed the threshold for this long before limiting occurs"
  [talonFx.output]
    type = "menu"
    order = 25
    menu = "configure motor output"
    [talonFx.output.brake]
      type = "talon.brake"
      order = 10
      menu = "brake mode"
      help = "Mode of operation during Neutral output, brake or coast."
      device = "fx"
    [talonFx.output.reversed]
      type = "talon.param"
      order = 20
      menu = "motor output reversed"
      param = "OUTPUT_REVERSED"
      device = "fx"
    [talonFx.output.open-loop_ramp]
      type = "talon.param"
      order = 30
      menu = "open-loop ramp rate"
      param = "OPEN_LOOP_RAMP"
      device = "fx"
    [talonFx.output.closed-loop_ramp]
      type = "talon.param"
      order = 40
      menu = "closed-loop ramp rate"
      param = "CLOSED_LOOP_RAMP"
      device = "fx"
    [talonFx.output.forward_peak_output]
      type = "talon.param"
      order = 50
      menu = "forward peak output"
      param = "PEAK_OUTPUT_FORWARD"
      device = "fx"
    [talonFx.output.reverse_peak_output]
      type = "talon.param"
      order = 60
      menu = "reverse peak output"
      param = "PEAK_OUTPUT_REVERSE"
      device = "fx"
    [talonFx.output.forward_nominal_output]
      type = "talon.param"
      order = 70
      menu = "forward nominal output"
      param = "NOMINAL_OUTPUT_FORWARD"
      device = "fx"
    [talonFx.output.reverse_nominal_output]
      type = "talon.param"
      order = 80
      menu = "reverse nominal output"
      param = "NOMINAL_OUTPUT_REVERSE"
      device = "fx"
    [talonFx.output.neutral_deadband]
      type = "talon.param"
      order = 90
      menu = "neutral deadband"
      param = "NEUTRAL_DEADBAND"
      device = "fx"
    [talonFx.output.motor_commutation]
      type = "talon.commutation"
      order = 100
      menu = "motor commutation"
      device = "fx"
  [talonFx.velocity_measurement]
    type = "menu"
    order = 26
    menu = "configure velocity measurement"
    [talonFx.velocity_measurement.period]
      type = "talon.velocity.period"
     order = 10
      menu = "velocity measurement period"
      device = "fx"
    [talonFx.velocity_measurement.window]
      type = "talon.param"
      order = 20
      menu = "velocity measurement window"
      param = "VELOCITY_MEASUREMENT_WINDOW"
      device = "fx"
  [talonFx.voltage_compensation]
    type = "menu"
    order = 27
    menu = "configure voltage compensation"
    [talonFx.voltage_compensation.enabled]
      type = "talon.param"
      order = 10
      menu = "voltage compensation enabled"
      param = "VOLTAGE_COMP_ENABLE"
      device = "fx"
    [talonFx.voltage_compensation.saturation_voltage]
      type = "talon.param"
      order = 20
      menu = "voltage compensation saturation voltage"
      param = "VOLTAGE_COMP_SATURATION"
      device = "fx"
    [talonFx.voltage_compensation.filter]
      type = "talon.param"
      order = 30
      menu = "voltage compensation measurement filter"
      param = "VOLTAGE_MEASUREMENT_FILTER"
      device = "fx"
  [talonFx.frame]
    type = "menu"
    order = 60
    menu = "configure CAN bus frames"
    [talonFx.frame.grapher]
      type = "default"
      order = 10
      menu = "set grapher defaults"
      device = "fx"
    [talonFx.frame.general]
      type = "talon.param"
      order = 20
      menu = "general status frame"
      param = "STATUS_GENERAL"
      device = "fx"
    [talonFx.frame.feedback_0]
      type = "talon.param"
      order = 30
      menu = "feedback 0 status frame"
      param = "STATUS_FEEDBACK0"
      device = "fx"
    [talonFx.frame.quad_encoder]
      type = "talon.param"
      order = 40
      menu = "quad encoder status frame"
      param = "STATUS_QUAD_ENCODER"
      device = "fx"
    [talonFx.frame.ain_temp_vbat]
      type = "talon.param"
      order = 50
      menu = "ain/temp/vbat status frame"
      param = "STATUS_AIN_TEMP_VBAT"
      device = "fx"
    [talonFx.frame.pulse_width]
      type = "talon.param"
      order = 60
      menu = "pulse width status frame"
      param = "STATUS_PULSE_WIDTH"
      device = "fx"
    [talonFx.frame.motion]
      type = "talon.param"
      order = 70
      menu = "motion status frame"
      param = "STATUS_MOTION"
      device = "fx"
    [talonFx.frame.pidf_0]
      type = "talon.param"
      order = 80
      menu = "PIDF 0 status frame"
      param = "STATUS_PIDF0"
      device = "fx"
    [talonFx.frame.misc]
      type = "talon.param"
      order = 90
      menu = "Misc. status frame"
      param = "STATUS_MISC"
      device = "fx"
    [talonFx.frame.comm]
      type = "talon.param"
      order = 100
      menu = "Communication status frame"
      param = "STATUS_COMM"
      device = "fx"
    [talonFx.frame.motionBuff]
      type = "talon.param"
      order = 110
      menu = "Motion Profile Buffer status frame"
      param = "STATUS_MOTION_BUFF"
      device = "fx"
    [talonFx.frame.feedback1]
      type = "talon.param"
      order = 120
      menu = "Feedback1 status frame"
      param = "STATUS_FEEDBACK1"
      device = "fx"
    [talonFx.frame.pidf1]
      type = "talon.param"
      order = 130
      menu = "PIDF1 status frame"
      param = "STATUS_PIDF1"
      device = "fx"
    [talonFx.frame.firmware]
      type = "talon.param"
      order = 140
      menu = "Firmware and API status frame"
      param = "STATUS_FIRMWARE_API"
      device = "fx"
    [talonFx.frame.gadgeteer]
      type = "talon.param"
      order = 150
      menu = "UART Gadgeteer status frame"
      param = "STATUS_UART_GADGETEER"
      device = "fx"
  [talonFx.limit]
    type = "menu"
    order = 70
    menu = "configure soft and hard limits"
    [talonFx.limit.forward_hard_source]
      type = "talon.hard.source"
      order = 10
      forward = true
      menu = "forward hard limit source"
      device = "fx"
      help = "Select a limit switch source from the feedback connector, remote Talon SRX, CANifier, or deactivate the feature."
    [talonFx.limit.forward_hard_normal]
      type = "talon.hard.normal"
      order = 20
      forward = true
      menu = "forward hard limit normal"
      device = "fx"
     help = "Select whether this limit switch is normally open, normally closed, or disabled, which overrides the setting from the web-based configuration page."
    [talonFx.limit.reverse_hard_source]
      type = "talon.hard.source"
      order = 30
      forward = false
      menu = "reverse hard limit source"
      device = "fx"
      help = "Select a limit switch source from the feedback connector, remote Talon SRX, CANifier, or deactivate the feature."
    [talonFx.limit.reverse_hard_normal]
      type = "talon.hard.normal"
      order = 40
      forward = false
      menu = "reverse hard limit normal"
      device = "fx"
      help = "Select whether this limit switch is normally open, normally closed, or disabled, which overrides the setting from the web-based configuration page."
    [talonFx.limit.forward_soft_enabled]
      type = "talon.param"
      order = 50
      menu = "forward soft limit enabled"
      param = "SOFT_LIMIT_ENABLE_FORWARD"
      device = "fx"
    [talonFx.limit.forward_soft_threshold]
      type = "talon.param"
      order = 60
      menu = "forward soft limit threshold"
      param = "SOFT_LIMIT_THRESHOLD_FORWARD"
      device = "fx"
    [talonFx.limit.reverse_soft_enabled]
      type = "talon.param"
      order = 70
      menu = "reverse soft limit enabled"
      param = "SOFT_LIMIT_ENABLE_REVERSE"
      device = "fx"
    [talonFx.limit.reverse_soft_threshold]
      type = "talon.param"
      order = 80
      menu = "reverse soft limit threshold"
      param = "SOFT_LIMIT_THRESHOLD_REVERSE"
      device = "fx"
  [talonFx.factory_default]
    type = "talon.param"
    order = 80
    menu = "configure factory defaults"
    param = "FACTORY_DEFAULTS"
    device = "fx"

[FxP6]
  type = "menu"
  order = 17
  menu = "work with talonFX's"
  [FxP6.run]
    type = "p6.run"
    order = 10
    menu = "run active talon fx's"
  [FxP6.select]
    type = "p6.select"
    order = 20
    menu = "active fx's"
  [FxP6.status]
    type = "p6.status"
    order = 30
    menu = "status of active talonFx's"
  [FxP6.mode]
    type = "menu"
    order = 40
    menu = "config active mode"
    [FxP6.mode.status]
      type = "p6.modeStatus"
      order = 10
      menu = "active mode"
    [FxP6.mode.select]
      type = "p6.mode"
      order = 15
      menu = "select mode type"
    [FxP6.mode.openLoop]
      type = "menu"
      order = 20
      menu = "open loop modes"
      [FxP6.mode.openLoop.deadband]
        type = "p6.param"
        order = 20
        menu = "set torque current deadband (A)"
        param = "TORQUE_CURRENT_DEADBAND"
    [FxP6.mode.position]
      type = "menu"
      order = 30
      menu = "position modes"
      [FxP6.mode.position.velocity]
        type = "p6.param"
        order = 20
        menu = "velocity target"
        param = "VELOCITY"
      [FxP6.mode.position.feedFwd]
        type = "p6.param"
        order = 30
        menu = "velocity feed forward"
        param = "FEED_FORWARD"
    [FxP6.mode.velocity]
      type = "menu"
      order = 40
      menu = "velocity modes"
      [FxP6.mode.velocity.acceleration]
        type = "p6.param"
        order = 20
        menu = "select acceleration target"
        param = "ACCELERATION"
      [FxP6.mode.velocity.feedFwd]
        type = "p6.param"
        order = 30
        menu = "feed forward"
        param = "FEED_FORWARD"
    [FxP6.mode.motion]
      type = "menu"
      order = 50
      menu = "motion magic modes"
      [FxP6.mode.motion.motionType]
        type = "p6.mmType"
        order = 10
        menu = "select motion magic type"
      [FxP6.mode.motion.feedFwd]
        type = "p6.param"
        order = 20
        menu = "select feed forward (sel unit)"
        param = "FEED_FORWARD"
      [FxP6.mode.motion.velocity]
        type = "p6.param"
        order = 30
        menu = "select velocity target (rot/s)"
        param = "VELOCITY"
      [FxP6.mode.motion.acceleration]
        type = "p6.param"
        order = 40
        menu = "select acceleration target (rot/s^2)"
        param = "ACCELERATION"
      [FxP6.mode.motion.jerk]
        type = "p6.param"
        order = 50
        menu = "select jerk target (rot/s^3)"
        param = "JERK"
    [FxP6.mode.diff]
      type = "menu"
      order = 60
      menu = "differential modes"
      [FxP6.mode.diff.diffType]
        type = "p6.diffType"
        order = 10
        menu = "select differential type"
      [FxP6.mode.diff.slot]
        type = "p6.param"
        order = 20
        menu = "select differential slot"
        param = "DIFFERENTIAL_SLOT"
      [FxP6.mode.diff.target]
        type = "p6.param"
        order = 30
        menu = "select differential target (rots)"
        param = "DIFFERENTIAL_TARGET"
    [FxP6.mode.follow]
      type = "menu"
      order = 70
      menu = "follower modes"
      [FxP6.mode.follow.followType]
        type = "p6.followType"
        order = 10
        menu = "select follower type"
      [FxP6.mode.follow.oppose]
        type = "p6.param"
        order = 20
        menu = "oppose leader direction"
        param = "OPPOSE_MAIN"
    [FxP6.mode.neutral]
      type = "menu"
      order = 80
      memnu = "neutral modes"
      [FxP6.mode.neutral.select]
        type = "p6.neutralOut"
        order = 10
        menu = "select neutral output"
    [FxP6.mode.foc]
      type = "p6.param"
      order = 100
      menu = "(pro) enable FOC"
      param = "FOC"
    [FxP6.mode.overrideNeut]
      type = "p6.param"
      order = 110
      menu = "override neutral mode"
      param = "OVERRIDE_NEUTRAL"
    [FxP6.mode.limFwd]
      type = "p6.param"
      order = 120
      menu = "limit forward motion"
      param = "LIM_FWD_MOT"
    [FxP6.mode.limRev]
      type = "p6.param"
      order = 130
      menu = "limit reverse motion"
      param = "LIM_REV_MOT"
  [FxP6.units]
    type = "p6.units"
    order = 50
    menu = "select active units"
  [FxP6.feedback]
    type = "menu"
    order = 60
    menu = "setup feedback configs"
    [FxP6.feedback.offset]
      type = "p6.param"
      order = 10
      menu = "set rotor offset"
      param = "ROTOR_OFFSET"
    [FxP6.feedback.sense2mech]
      type = "p6.param"
      order = 20
      menu = "set sensor to mechanism ratio"
      param = "SENSOR_TO_MECH_RATIO"
    [FxP6.feedback.rotor2sense]
      type = "p6.param"
      order = 30
      menu = "set rotor to sensor ratio"
      param = "ROTOR_TO_SENSOR_RATIO"
    [FxP6.feedback.remoteId]
      type = "p6.param"
      order = 40
      menu = "set remote sensor id"
      param = "REMOTE_SENSOR_ID"
  [FxP6.slot]
    type = "menu"
    order = 70
    menu = "setup slot configs"
    [FxP6.slot.active]
      type = "p6.slot"
      order = 10
      menu = "active slot"
    [FxP6.slot.kP]
      type = "p6.param"
      order = 20
      menu = "kP"
      param = "SLOT_KP"
    [FxP6.slot.kI]
      type = "p6.param"
      order = 30
      menu = "kI"
      param = "SLOT_KI"
    [FxP6.slot.kD]
      type = "p6.param"
      order = 40
      menu = "kD"
      param = "SLOT_KD"
    [FxP6.slot.kS]
      type = "p6.param"
      order = 50
      menu = "kS"
      param = "SLOT_KS"
    [FxP6.slot.kV]
      type = "p6.param"
      order = 60
      menu = "kV"
      param = "SLOT_KV"
    [FxP6.slot.kA]
      type = "p6.param"
      order = 65
      menu = "kA"
      param = "SLOT_KA"
    [FxP6.slot.kG]
      type = "p6.param"
      order = 70
      menu = "kG"
      param = "SLOT_KG"
    [FxP6.slot.gravity]
      type = "p6.gravity"
      order = 80
      menu = "gravity type"
  [FxP6.motion]
    type = "menu"
    order = 80
    menu = "setup motion magic configs"
    [FxP6.motion.accel]
      type = "p6.param"
      order = 10
      menu = "acceleration"
      param = "MM_ACCEL"
    [FxP6.motion.cruise]
      type = "p6.param"
      order = 20
      menu = "cruise velocity"
      param = "MM_CRUISE_VEL"
    [FxP6.motion.jerk]
      type = "p6.param"
      order = 30
      menu = "jerk"
      param = "MM_JERK"
  [FxP6.diff]
    type = "menu"
    order = 90
    menu = "setup differential configs"
    [FxP6.diff.duty]
      type = "p6.param"
      order = 10
      menu = "peak differential duty cycle"
      param = "PEAK_DIFF_DC"
    [FxP6.diff.torque]
      type = "p6.param"
      order = 20
      menu = "peak differential torque current"
      param = "PEAK_DIFF_TORQUE"
    [FxP6.diff.volt]
      type = "p6.param"
      order = 30
      menu = "peak differential voltage"
      param = "PEAK_DIFF_VOLT"
    [FxP6.diff.remote]
      type = "p6.param"
      order = 40
      menu = "differential remote id"
      param = "DIFF_SENSOR_REMOTE_ID"
    [FxP6.diff.fx]
      type = "p6.param"
      order = 50
      menu = "differential fx id"
      param = "DIFF_FX_ID"
  [FxP6.current]
    type = "menu"
    order = 100
    menu = "setup current limit configs"
    [FxP6.current.statorEn]
      type = "p6.param"
      order = 10
      menu = "stator limit enable"
      param = "STATOR_LIM_EN"
    [FxP6.current.statorLim]
      type = "p6.param"
      order = 20
      menu = "stator current limit"
      param = "STATOR_LIM"
    [FxP6.current.suppEn]
      type = "p6.param"
      order = 30
      menu = "supply limit enable"
      param = "SUPP_LIM_EN"
    [FxP6.current.suppLim]
      type = "p6.param"
      order = 40
      menu = "supply current limit"
      param = "SUPP_LIM"
    [FxP6.current.tripI]
      type = "p6.param"
      order = 50
      menu = "supply current trip threshold (A)"
      param = "SUPP_TRIP_THRES"
    [FxP6.current.tripT]
      type = "p6.param"
      order = 60
      menu = "supply current trip time (s)"
      param = "SUPP_TRIP_TIME"
  [FxP6.motor]
    type = "menu"
    order = 110
    menu = "setup motor output and ramp configs"
    [FxP6.motor.invert]
      type = "p6.invert"
      order = 10
      menu = "motor inversion"
    [FxP6.motor.neutral]
      type = "p6.neutral"
      order = 20
      menu = "neutral mode"
    [FxP6.motor.duty]
      type = "menu"
      order = 30
      menu = "duty cycle configs"
      [FxP6.motor.duty.peakFwd]
        type= "p6.param"
        order = 20
        menu = "peak forward %"
        param = "PEAK_FWD_DC"
      [FxP6.motor.duty.peakRev]
        type = "p6.param"
        order = 30
        menu = "peak reverse %"
        param = "PEAK_REV_DC"
      [FxP6.motor.duty.dead]
        type = "p6.param"
        order = 40
        menu = "neutral deadband (%)"
        param = "NEUTRAL_DEADBAND_DC"
      [FxP6.motor.duty.openRamp]
        type = "p6.param"
        order = 50
        menu = "open loop ramp (%)"
        param = "OPEN_LOOP_RAMP_DC"
      [FxP6.motor.duty.closedRamp]
        type = "p6.param"
        order = 60
        menu = "closed loop ramp (%)"
        param = "CLOSED_LOOP_RAMP_DC"
    [FxP6.motor.volt]
      type = "menu"
      order = 40
      menu = "voltage configs"
      [FxP6.motor.volt.peakFwd]
        type = "p6.param"
        order = 10
        menu = "peak forward (V)"
        param = "PEAK_FWD_V"
      [FxP6.motor.volt.peakRev]
        type = "p6.param"
        order = 20
        menu = "peak reverse (V)"
        param = "PEAK_REV_V"
      [FxP6.motor.volt.supplyConst]
        type = "p6.param"
        order = 30
        menu = "supply voltage time const"
        param = "SUPPLY_V_TIME_CONST"
      [FxP6.motor.volt.openRamp]
        type = "p6.param"
        order = 40
        menu = "open loop ramp (V)"
        param = "OPEN_LOOP_RAMP_V"
      [FxP6.motor.volt.closedRamp]
        type = "p6.param"
        order = 50
        menu = "closed loop ramp (V)"
        param = "CLOSED_LOOP_RAMP_V"
    [FxP6.motor.torque]
      type = "menu"
      order = 50
      menu = "torque current configs"
      [FxP6.motor.torque.peakFwd]
        type = "p6.param"
        order = 10
        menu = "peak forward (A)"
        param = "PEAK_FWD_I"
      [FxP6.motor.torque.peakRev]
        type = "p6.param"
        order = 20
        menu = "peak reverse (A)"
        param = "PEAK_REV_I"
      [FxP6.motor.torque.dead]
        type = "p6.param"
        order = 30
        menu = "neutral deadband (A)"
        param = "TORQUE_NEUTRAL_DEADBAND"
      [FxP6.motor.openRamp]
        type = "p6.param"
        order = 40
        menu = "open loop ramp (A)"
        param = "OPEN_LOOP_RAMP_I"
      [FxP6.motor.closedRamp]
        type = "p6.param"
        order = 50
        menuu = "closed loop ramp (A)"
        param = "CLOSED_LOOP_RAMP_I"
  [FxP6.limits]
    type = "menu"
    order = 120
    menu = "setup hard/soft limits"
    [FxP6.limits.hard]
      type = "menu"
      order = 10
      menu = "hard limits"
      [FxP6.limits.hard.fwdEn]
        type = "p6.param"
        order = 10
        menu = "FWD limit enable"
        param = "FWD_HARD_EN"
      [FxP6.limits.hard.fwdNormal]
        type = "p6.fwdNorm"
        order = 10
        menu = "FWD limit normal"
      [FxP6.limits.hard.fwdSource]
        type = "p6.fwdSource"
        order = 20
        menu = "FWD limit source"
      [FxP6.limits.hard.fwdRemote]
        type = "p6.param"
        order = 30
        menu = "FWD limit remote id"
        param = "FWD_REMOTE_ID"
      [FxP6.limits.hard.fwdAutoSet]
        type = "p6.param"
        order = 40
        menu = "Autoset Position on FWD limit"
        param = "FWD_AUTOSET_POS"
      [FxP6.limits.hard.fwdAutoSetValue]
        type = "p6.param"
        order = 50
        menu = "FWD autoset position value"
        param = "FWD_AUTOSET_POS_VALUE"
      [FxP6.limits.hard.revEn]
        type = "p6.param"
        order = 60
        menu = "REV limit enable"
        param = "REV_HARD_EN"
      [FxP6.limits.hard.revNormal]
        type = "p6.revNorm"
        order = 70
        menu = "REV limit normal"
      [FxP6.limits.hard.revSource]
        type = "p6.revSource"
        order = 80
        menu = "REV limit source"
      [FxP6.limits.hard.revRemote]
        type = "p6.param"
        order = 90
        menu = "REV limit remote id"
        param = "REV_REMOTE_ID"
      [FxP6.limits.hard.revAutoSet]
        type = "p6.param"
        order = 100
        menu = "Autoset position on REV limit"
        param = "REV_AUTOSET_POS"
      [FxP6.limits.hard.revAutoSetValue]
        type = "p6.param"
        order = 110
        menu = "REV autoset position value"
        param = "REV_AUTOSET_POS_VALUE"
    [FxP6.limits.soft]
      type = "menu"
      order = 20
      menu = "soft limits"
      [FxP6.limits.soft.fwdEn]
        type = "p6.param"
        order = 10
        menu = "FWD limit enable"
        param = "FWD_SOFT_EN"
      [FxP6.limits.soft.fwdThres]
        type = "p6.param"
        order = 20
        menu = "FWD soft limit"
        param = "FWD_SOFT_THRES"
      [FxP6.limits.soft.revEn]
        type = "p6.param"
        order = 30
        menu = "REV limit enable"
        param = "REV_SOFT_EN"
      [FxP6.limits.soft.revThres]
        type = "p6.param"
        order = 40
        menu = "REV soft limit"
        param = "REV_SOFT_THRES"
  [FxP6.audio]
    type = "menu"
    order = 130
    menu = "setup audio configs"
    [FxP6.audio.disable]
      type = "p6.param"
      order = 10
      menu = "allow music on disable"
      param = "ALLOW_MUSIC_DIS"
    [FxP6.audio.beepBoot]
      type = "p6.param"
      order = 20
      menu = "beep on boot"
      param = "BEEP_ON_BOOT"
    [FxP6.audio.beepConfig]
      type = "p6.param"
      order = 30
      menu = "beep on config"
      param = "BEEP_ON_CONFIG"
  [FxP6.factory]
    type = "p6.factory"
    order = 140
    menu = "config factory default"
  [FxP6.grapher]
    type = "menu"
    order = 150
    menu = "set status frames"
    [FxP6.grapher.default]
      type = "p6.graph"
      order = 10
      menu = "set to default update rate"
    [FxP6.grapher.rate]
      type = "p6.param"
      order = 20
      menu = "Grapher Frame Rate (Hz)"
      param = "GRAPHER_FRAME"

[servo]
  type = "menu"
  order = 20
  menu = "work with servos"
  [servo.run]
    type = "servo.run"
    order = 10
    menu = "set servo positions"
  [servo.select]
    type = "servo.select"
    order = 20
    menu = "active servos"

[solenoid]
  type = "menu"
  order = 25
  menu = "work with solenoids"
  [solenoid.run]
    type = "solenoid.run"
    order = 10
    menu = "set solenoid positions"
  [solenoid.select]
    type = "solenoid.select"
    order = 20
    menu = "active solenoids"

[digital_output]
  type = "menu"
  order = 30
  menu = "work with digital outputs"
  [digital_output.set]
    type = "digital_output.run"
    order = 10
    menu = "set digital output"
  [digital_output.select]
    type = "digital_output.select"
    order = 20
    menu = "active digital outputs"

[canifier]
  type = "menu"
  order = 40
  menu = "work with a canifier"
  [canifier.select]
    type = "canifier.select"
    order = 10
    menu = "active canifier"
  [canifier.status]
    type = "canifier.status"
    order = 20
    menu = "status of active canifier"
  [canifier.general_inputs]
    type = "canifier.inputs"
    order = 40
    menu = "state of general inputs"
  [canifier.pwm_inputs]
    type = "canifier.pwm_in"
    order = 50
    menu = "state of PWM inputs"
  [canifier.quad]
    type = "canifier.param"
    order = 60
    menu = "quadrature encoder position"
    param = "QUAD_POSITION"
  [canifier.pwm_output]
    type = "canifier.pwm_out"
    order = 70
    menu = "set PWM output"
  [canifier.general_output]
    type = "menu"
    order = 80
    menu = "set general output pins"
    [canifier.general_output.limf]
      type = "default"
      order = 10
      menu = "LIMF"
    [canifier.general_output.limr]
      type = "default"
      order = 20
      menu = "LIMR"
    [canifier.general_output.quad_a]
      type = "default"
      order = 30
      menu = "QUAD A"
    [canifier.general_output.quad_b]
      type = "default"
      order = 40
      menu = "QUAD B"
    [canifier.general_output.quad_idx]
      type = "default"
      order = 50
      menu = "QUAD IDX"
    [canifier.general_output.scl]
      type = "default"
      order = 60
      menu = "SCL"
    [canifier.general_output.sda]
      type = "default"
      order = 70
      menu = "SDA"
    [canifier.general_output.spi_clk_pwm0]
      type = "default"
      order = 80
      menu = "SPI CLK PWM 0"
    [canifier.general_output.spi_cs]
      type = "default"
      order = 90
      menu = "SPI CS"
    [canifier.general_output.spi_miso_pwm2]
      type = "default"
      order = 100
      menu = "SPI MISO PWM 2"
    [canifier.general_output.spi_mosi_pwm1]
      type = "default"
      order = 110
      menu = "SPI MOSI PWM 1"

  [canifier.frame]
    type = "menu"
    order = 90
    menu = "configure CAN bus frames"
    [canifier.frame.grapher]
      type = "default"
      order = 10
      menu = "set grapher defaults"
    [canifier.frame.general_1]
      type = "canifier.param"
      order = 20
      menu = "general 1 status frame"
      param = "STATUS_GENERAL1"
    [canifier.frame.general_2]
      type = "canifier.param"
      order = 30
      menu = "general 2 status frame"
      param = "STATUS_GENERAL2"
    [canifier.frame.pwm_0]
      type = "canifier.param"
      order = 40
      menu = "PWM input 0 status frame"
      param = "STATUS_PWM_INPUTS0"
    [canifier.frame.pwm_1]
      type = "canifier.param"
      order = 50
      menu = "PWM input 1 status frame"
      param = "STATUS_PWM_INPUTS1"
    [canifier.frame.pwm_2]
      type = "canifier.param"
      order = 60
      menu = "PWM input 2 status frame"
      param = "STATUS_PWM_INPUTS2"
    [canifier.frame.pwm_3]
      type = "canifier.param"
      order = 70
      menu = "PWM input 3 status frame"
      param = "STATUS_PWM_INPUTS3"
  [canifier.factory_defaults]
    type = "canifier.param"
    order = 100
    menu = "configure factory defaults"
    param = "FACTORY_DEFAULTS"


[swerve]
  type = "menu"
  order = 50
  menu = "work with swerve"
  [swerve.lock]
    type = "swerve.azimuth"
    order = 10
    menu = "lock azimuth position"
  [swerve.azimuth]
    type = "menu"
    order = 20
    menu = "update azimuth zero positions"
    [swerve.azimuth.save]
      type = "swerve.azimuth.save"
      order = 10
      menu = "save azimuth zero positions"
    [swerve.azimuth.select]
      type = "swerve.azimuth.select"
      order = 20
      menu = "active azimuth"
    [swerve.azimuth.adjust]
      type = "swerve.azimuth.adjust"
      order = 30
      menu = "active azimuth adjustment"

[gyro]
  type = "menu"
  order = 60
  menu = "work with gyro"
  [gyro.pigeon]
    type = "menu"
    order = 10
    menu = "work with pigeon"
    [gyro.pigeon.select]
      type = "pigeon.select"
      order = 5
      menu = "select active pigeon"
    [gyro.pigeon.data]
      type = "menu"
      order = 10
      menu = "set axis info"
      [gyro.pigeon.data.yaw]
        type = "pigeon.param"
        order = 10
        menu = "set yaw"
        param = "YAW"
      [gyro.pigeon.data.accumZ]
        type = "pigeon.param"
        order = 20
        menu = "set accumulator Z-angle"
        param = "ACCUM_Z_ANGLE"
      [gyro.pigeon.data.fuseHead]
        type = "pigeon.param"
        order = 30
        menu = "set fused heading"
        param = "FUSED_HEADING"
     [gyro.pigeon.data.tempComp]
       type = "pigeon.param"
       order = 40
       menu = "disable temperature compensation"
       param = "TEMP_COMP_DISABLE"
    [gyro.pigeon.status]
      type = "menu"
      order = 20
      menu = "set status frame periods"
      [gyro.pigeon.status.general]
        type = "pigeon.param"
        order = 10
        menu = "set general status frame"
        param = "GENERAL_STATUS"
      [gyro.pigeon.status.sixDeg]
        type = "pigeon.param"
        order = 20
        menu = "set roll, pitch, yaw status frame"
        param = "SIX_DEG_STATUS"
      [gyro.pigeon.status.fused]
        type = "pigeon.param"
        order = 30
        menu = "set 9-axis fused status frame"
        param = "FUSED_STATUS"
      [gyro.pigeon.status.accumGyro]
        type = "pigeon.param"
        order = 40
        menu = "set accumulated gyro status frame"
        param = "GYRO_ACCUM_STATUS"
      [gyro.pigeon.status.genCompass]
        type = "pigeon.param"
        order = 50
        menu = "set general compass status frame"
        param = "GEN_COMPASS_STATUS"
      [gyro.pigeon.status.genAccel]
        type = "pigeon.param"
        order = 60
        menu = "set general accelerometer status frame"
        param = "GEN_ACCEL_STATUS"
      [gyro.pigeon.status.quaternion]
        type = "pigeon.param"
        order = 70
        menu = "set quaternion status frame"
        param = "SIX_QUAT_STATUS"
      [gyro.pigeon.status.mag]
        type = "pigeon.param"
        order = 80
        menu = "raw magnetometer status frame"
        param = "MAG_STATUS"
      [gyro.pigeon.status.biasGyro]
        type = "pigeon.param"
        order = 90
        menu = "biased gyro status frame"
        param = "BIAS_GYRO_STATUS"
      [gyro.pigeon.status.biasAccel]
        type = "pigeon.param"
        order = 100
        menu = "biased accelerometer status frame"
        param = "BIAS_ACCEL_STATUS"
    [gyro.pigeon.defaults]
      type = "pigeon.param"
      order = 30
      menu = "config factory defaults"
      param = "FACTORY_DEFAULT"

# [dio]
#   type = "menu"
#   order = 20
#   menu = "work with digital I/O"
#   [dio.status]
#     type = "status"
#     order = 10
#     menu = "status of selected digital inputs"
#   [dio.set]
#     type = "command"
#     order = 20
#     menu = "set selected digital output"
