type = "menu"
[talon]
  type = "menu"
  order = 10
  menu = "work with talonSRXs"
  [talon.run]
    type = "talon.run"
    order = 5
    menu = "run active talons"
    device = "srx"
  [talon.select]
    type = "talon.select"
    order = 10
    menu = "active talons"
    device = "srx"
  [talon.status]
    type = "talon.status"
    order = 12
    menu = "status of active talons"
    device = "srx"
  [talon.mode]
    type = "talon.mode"
    order = 15
    menu = "control mode"
    device = "srx"
    help = "The output mode to apply. In PercentOutput, the output is between -1.0 and 1.0, with 0.0 as stopped. In Current mode, output value is in amperes. In Velocity mode, output value is in position change / 100ms. In Position mode, output value is in encoder ticks or an analog value, depending on the sensor. In Follower mode, the output value is the integer device ID of the talon to duplicate."
  [talon.sensor]
    type = "menu"
    order = 17
    menu = "configure feedback sensors"
    device = "srx"
    [talon.sensor.primary]
      type = "talon.sensor"
      order = 10
      menu = "primary closed-loop sensor"
      pid = 0
      device = "srx"
      help = "Sensors for motor controllers provide feedback about the position, velocity, and acceleration of the system using that motor controller."
    [talon.sensor.auxiliary]
      type = "talon.sensor"
      order = 20
      menu = "auxiliary closed-loop sensor"
      pid = 1
      device = "srx"
      help = "Sensors for motor controllers provide feedback about the position, velocity, and acceleration of the system using that motor controller."
    [talon.sensor.primary_position]
      type = "talon.sensor.position"
      order = 30
      menu = "primary sensor feedback position"
      param = "SENSOR_POSITION"
      pid = 0
      device = "srx"
    [talon.sensor.auxiliary_position]
      type = "talon.sensor.position"
      order = 40
      menu = "auxiliary sensor feedback position"
      param = "SENSOR_POSITION"
      pid = 1
      device = "srx"
    [talon.sensor.primary_coefficient]
      type = "talon.sensor.coefficient"
      order = 50
      menu = "primary sensor feedback coefficient"
      param = "FEEDBACK_COEFFICIENT"
      pid = 0
      device = "srx"
    [talon.sensor.auxiliary_coefficient]
      type = "talon.sensor.coefficient"
      order = 60
      menu = "auxiliary sensor feedback coefficient"
      param = "FEEDBACK_COEFFICIENT"
      pid = 1
      device = "srx"
    [talon.sensor.phase]
      type = "talon.param"
      order = 70
      menu = "sensor phase reversed"
      param = "SENSOR_PHASE"
      device = "srx"
  [talon.slot]
    type = "menu"
    order = 20
    menu = "configure PID slots"
    device = "srx"
    [talon.slot.select]
      type = "talon.slot.select"
      order = 10
      menu = "active slot"
      device = "srx"
      help = "The Talon SRX supports up to 4 PIDF Slots, each with a unique set of gains that are stored persistently across power cycles. "
    [talon.slot.P]
      type ="talon.param"
      order = 20
      param = "SLOT_P"
      device = "srx"
    [talon.slot.I]
      type ="talon.param"
      order = 30
      param = "SLOT_I"
      device = "srx"
    [talon.slot.D]
      type ="talon.param"
      order = 40
      param = "SLOT_D"
      device = "srx"
    [talon.slot.F]
      type ="talon.param"
      order = 50
      param = "SLOT_F"
      device = "srx"
    [talon.slot.IZone]
      type ="talon.param"
      menu = "I Zone"
      order = 60
      param = "SLOT_I_ZONE"
      device = "srx"
    [talon.slot.AllowableErr]
      type ="talon.param"
      menu = "Allowable Error"
      order = 70
      param = "SLOT_ALLOWABLE_ERR"
      device = "srx"
    [talon.slot.MaxIAccum]
      type ="talon.param"
      menu = "Max I Accum"
      order = 80
      param = "SLOT_MAX_I_ACCUM"
      device = "srx"
    [talon.slot.PeakOutput]
      type ="talon.param"
      menu = "Peak output"
      order = 90
      param = "SLOT_PEAK_OUTPUT"
      device = "srx"
  [talon.motion_magic]
    type = "menu"
    order = 22
    menu = "configure motion magic"
    device = "srx"
    [talon.motion_magic.cruise_velocity]
      type = "talon.param"
      order = 10
      menu = "motion magic cruise velocity"
      param = "MOTION_CRUISE_VELOCITY"
      device = "srx"
    [talon.motion_magic.acceleration]
      type = "talon.param"
      order = 20
      menu = "motion magic acceleration"
      param = "MOTION_ACCELERATION"
      device = "srx"
  [talon.current]
    type = "menu"
    order = 23
    menu = "configure current limits"
    [talon.current.enabled]
      type = "talon.param"
      order = 10
      menu = "current limit enabled"
      param = "CURRENT_LIMIT_ENABLE"
      device = "srx"
    [talon.current.continuous]
      type = "talon.param"
      order = 20
      menu = "continuous current limit"
      param = "CURRENT_LIMIT_CONT"
      device = "srx"
    [talon.current.peak]
      type = "talon.param"
      order = 30
      menu = "peak current limit"
      param = "CURRENT_LIMIT_PEAK"
      device = "srx"
    [talon.current.peak_duration]
      type = "talon.param"
      order = 40
      menu = "peak current limit duration"
      param = "CURRENT_LIMIT_PEAK_DURATION"
      device = "srx"
    [talon.current.supply_enabled]
      type = "talon.param"
      order = 50
      menu = "supply current: limit enabled"
      param = "SUPPLY_CURRENT_LIMIT_ENABLE"
      device = "srx"
    [talon.current.supply_limit]
      type = "talon.param"
      order = 60
      menu = "supply current: current limit (A)"
      param = "SUPPLY_CURRENT_LIMIT"
      device = "srx"
    [talon.current.supply_triggerCurrent]
      type = "talon.param"
      order = 70
      menu = "supply current: trigger current (A)"
      param = "SUPPLY_CURRENT_LIMIT_THRES_CURRENT"
      device = "srx"
      help = "current must exceed this threshold before limiting occurs. If this number is less than currentLimit, currentLimit is used as the threshold"
    [talon.current.supply_triggerTime]
      type = "talon.param"
      order = 80
      menu = "supply current: trigger time (s)"
      param = "SUPPLY_CURRENT_LIMIT_THRES_TIME"
      device = "srx"
      help = "current must exceed the threshold for this long before limiting occurs"
  [talon.output]
    type = "menu"
    order = 25
    menu = "configure motor output"
    [talon.output.brake]
      type = "talon.brake"
      order = 10
      menu = "brake mode"
      help = "Mode of operation during Neutral output, brake or coast."
      device = "srx"
    [talon.output.reversed]
      type = "talon.param"
      order = 20
      menu = "motor output reversed"
      param = "OUTPUT_REVERSED"
      device = "srx"
    [talon.output.open-loop_ramp]
      type = "talon.param"
      order = 30
      menu = "open-loop ramp rate"
      param = "OPEN_LOOP_RAMP"
      device = "srx"
    [talon.output.closed-loop_ramp]
      type = "talon.param"
      order = 40
      menu = "closed-loop ramp rate"
      param = "CLOSED_LOOP_RAMP"
      device = "srx"
    [talon.output.forward_peak_output]
      type = "talon.param"
      order = 50
      menu = "forward peak output"
      param = "PEAK_OUTPUT_FORWARD"
      device = "srx"
    [talon.output.reverse_peak_output]
      type = "talon.param"
      order = 60
      menu = "reverse peak output"
      param = "PEAK_OUTPUT_REVERSE"
      device = "srx"
    [talon.output.forward_nominal_output]
      type = "talon.param"
      order = 70
      menu = "forward nominal output"
      param = "NOMINAL_OUTPUT_FORWARD"
      device = "srx"
    [talon.output.reverse_nominal_output]
      type = "talon.param"
      order = 80
      menu = "reverse nominal output"
      param = "NOMINAL_OUTPUT_REVERSE"
      device = "srx"
    [talon.output.neutral_deadband]
      type = "talon.param"
      order = 90
      menu = "neutral deadband"
      param = "NEUTRAL_DEADBAND"
      device = "srx"
  [talon.velocity_measurement]
    type = "menu"
    order = 26
    menu = "configure velocity measurement"
    [talon.velocity_measurement.period]
      type = "talon.velocity.period"
      order = 10
      menu = "velocity measurement period"
      device = "srx"
    [talon.velocity_measurement.window]
      type = "talon.param"
      order = 20
      menu = "velocity measurement window"
      param = "VELOCITY_MEASUREMENT_WINDOW"
      device = "srx"
  [talon.voltage_compensation]
    type = "menu"
    order = 27
    menu = "configure voltage compensation"
    [talon.voltage_compensation.enabled]
      type = "talon.param"
      order = 10
      menu = "voltage compensation enabled"
      param = "VOLTAGE_COMP_ENABLE"
      device = "srx"
    [talon.voltage_compensation.saturation_voltage]
      type = "talon.param"
      order = 20
      menu = "voltage compensation saturation voltage"
      param = "VOLTAGE_COMP_SATURATION"
      device = "srx"
    [talon.voltage_compensation.filter]
      type = "talon.param"
      order = 30
      menu = "voltage compensation measurement filter"
      param = "VOLTAGE_MEASUREMENT_FILTER"
      device = "srx"
  [talon.frame]
    type = "menu"
    order = 60
    menu = "configure CAN bus frames"
    [talon.frame.grapher]
      type = "default"
      order = 10
      menu = "set grapher defaults"
      device = "srx"
    [talon.frame.general]
      type = "talon.param"
      order = 20
      menu = "general status frame"
      param = "STATUS_GENERAL"
      device = "srx"
    [talon.frame.feedback_0]
      type = "talon.param"
      order = 30
      menu = "feedback 0 status frame"
      param = "STATUS_FEEDBACK0"
      device = "srx"
    [talon.frame.quad_encoder]
      type = "talon.param"
      order = 40
      menu = "quad encoder status frame"
      param = "STATUS_QUAD_ENCODER"
      device = "srx"
    [talon.frame.ain_temp_vbat]
      type = "talon.param"
      order = 50
      menu = "ain/temp/vbat status frame"
      param = "STATUS_AIN_TEMP_VBAT"
      device = "srx"
    [talon.frame.pulse_width]
      type = "talon.param"
      order = 60
      menu = "pulse width status frame"
      param = "STATUS_PULSE_WIDTH"
      device = "srx"
    [talon.frame.motion]
      type = "talon.param"
      order = 70
      menu = "motion status frame"
      param = "STATUS_MOTION"
      device = "srx"
    [talon.frame.pidf_0]
      type = "talon.param"
      order = 80
      menu = "PIDF 0 status frame"
      param = "STATUS_PIDF0"
      device = "srx"
  [talon.limit]
    type = "menu"
    order = 70
    menu = "configure soft and hard limits"
    [talon.limit.forward_hard_source]
      type = "talon.hard.source"
      order = 10
      forward = true
      menu = "forward hard limit source"
      device = "srx"
      help = "Select a limit switch source from the feedback connector, remote Talon SRX, CANifier, or deactivate the feature."
    [talon.limit.forward_hard_normal]
      type = "talon.hard.normal"
      order = 20
      forward = true
      menu = "forward hard limit normal"
      device = "srx"
      help = "Select whether this limit switch is normally open, normally closed, or disabled, which overrides the setting from the web-based configuration page."
    [talon.limit.reverse_hard_source]
      type = "talon.hard.source"
      order = 30
      forward = false
      menu = "reverse hard limit source"
      device = "srx"
      help = "Select a limit switch source from the feedback connector, remote Talon SRX, CANifier, or deactivate the feature."
    [talon.limit.reverse_hard_normal]
      type = "talon.hard.normal"
      order = 40
      forward = false
      menu = "reverse hard limit normal"
      device = "srx"
      help = "Select whether this limit switch is normally open, normally closed, or disabled, which overrides the setting from the web-based configuration page."
    [talon.limit.forward_soft_enabled]
      type = "talon.param"
      order = 50
      menu = "forward soft limit enabled"
      param = "SOFT_LIMIT_ENABLE_FORWARD"
      device = "srx"
    [talon.limit.forward_soft_threshold]
      type = "talon.param"
      order = 60
      menu = "forward soft limit threshold"
      param = "SOFT_LIMIT_THRESHOLD_FORWARD"
      device = "srx"
    [talon.limit.reverse_soft_enabled]
      type = "talon.param"
      order = 70
      menu = "reverse soft limit enabled"
      param = "SOFT_LIMIT_ENABLE_REVERSE"
      device = "srx"
    [talon.limit.reverse_soft_threshold]
      type = "talon.param"
      order = 80
      menu = "reverse soft limit threshold"
      param = "SOFT_LIMIT_THRESHOLD_REVERSE"
      device = "srx"
    # [talon.limit.forward_remote]
    #   type = "default"
    #   order = 90
    #   menu = "forward remote limit switch"
    # [talon.limit.reverse_remote]
    #   type = "default"
    #   order = 100
    #   menu = "reverse remote limit switch"
  [talon.factory_defaults]
    type = "talon.param"
    order = 80
    menu = "configure factory defaults"
    param = "FACTORY_DEFAULTS"
    device = "srx"

[talonFx]
  type = "menu"
  order = 15
  menu = "work with talonFXs"
  [talonFx.run]
    type = "talon.run"
    order = 5
    menu = "run active talonFXs"
    device = "fx"
  [talonFx.select]
    type = "talon.select"
    order = 10
    menu = "active talonFXs"
    device = "fx"
  [talonFx.status]
    type = "talon.status"
    order = 12
    menu = "status of active talonFXs"
    device = "fx"
  [talonFx.mode]
    type = "talon.mode"
    order = 15
    menu = "control mode"
    device = "fx"
    help = "The output mode to apply. In PercentOutput, the output is between -1.0 and 1.0, with 0.0 as stopped. In Current mode, output value is in amperes. In Velocity mode, output value is in position change / 100ms. In Position mode, output value is in encoder ticks or an analog value, depending on the sensor. In Follower mode, the output value is the integer device ID of the talon to duplicate."
  [talonFx.sensor]
    type = "menu"
    order = 17
    menu = "configure feedback sensors"
    device = "fx"
    [talonFx.sensor.primary]
      type = "talon.sensor"
      order = 10
      menu = "primary closed-loop sensor"
      pid = 0
      device = "fx"
      help = "Sensors for motor controllers provide feedback about the position, velocity, and acceleration of the system using that motor controller."
    [talonFx.sensor.auxiliary]
      type = "talon.sensor"
      order = 20
      menu = "auxiliary closed-loop sensor"
      pid = 1
      device = "fx"
      help = "Sensors for motor controllers provide feedback about the position, velocity, and acceleration of the system using that motor controller."
    [talonFx.sensor.primary_position]
      type = "talon.sensor.position"
      order = 30
      menu = "primary sensor feedback position"
      param = "SENSOR_POSITION"
      pid = 0
      device = "fx"
    [talonFx.sensor.auxiliary_position]
      type = "talon.sensor.position"
      order = 40
      menu = "auxiliary sensor feedback position"
      param = "SENSOR_POSITION"
      pid = 1
      device = "fx"
    [talonFx.sensor.primary_coefficient]
      type = "talon.sensor.coefficient"
      order = 50
      menu = "primary sensor feedback coefficient"
      param = "FEEDBACK_COEFFICIENT"
      pid = 0
      device = "fx"
    [talonFx.sensor.auxiliary_coefficient]
      type = "talon.sensor.coefficient"
      order = 60
      menu = "auxiliary sensor feedback coefficient"
      param = "FEEDBACK_COEFFICIENT"
      pid = 1
      device = "fx"
    [talonFx.sensor.phase]
      type = "talon.param"
      order = 70
      menu = "sensor phase reversed"
      param = "SENSOR_PHASE"
      device = "fx"
    [talonFx.sensor.offset]
      type = "talon.param"
      order = 80
      menu = "integrated sensor offset degrees"
      param = "INTEGRATED_SENSOR_OFFSET_DEGREES"
      device = "fx"
    [talonFx.sensor.absolute_range]
      type = "talon.absoluteRange"
      order = 90
      menu = "absolute sensor range"
      device = "fx"
    [talonFx.sensor.initialization_strategy]
      type = "talon.initStrategy"
      order = 100
      menu = "integrated sensor initialization strategy"
      device = "fx"
  [talonFx.slot]
    type = "menu"
    order = 20
    menu = "configure PID slots"
    device = "fx"
    [talonFx.slot.select]
      type = "talon.slot.select"
      order = 10
      menu = "active slot"
      device = "fx"
      help = "The Talon FX supports up to 4 PIDF Slots, each with a unique set of gains that are stored persistently across power cycles. "
    [talonFx.slot.P]
      type ="talon.param"
      order = 20
      param = "SLOT_P"
      device = "fx"
    [talonFx.slot.I]
      type ="talon.param"
      order = 30
      param = "SLOT_I"
      device = "fx"
    [talonFx.slot.D]
      type ="talon.param"
      order = 40
      param = "SLOT_D"
      device = "fx"
    [talonFx.slot.F]
      type ="talon.param"
      order = 50
      param = "SLOT_F"
      device = "fx"
    [talonFx.slot.IZone]
      type ="talon.param"
      menu = "I Zone"
      order = 60
      param = "SLOT_I_ZONE"
      device = "fx"
    [talonFx.slot.AllowableErr]
      type ="talon.param"
      menu = "Allowable Error"
      order = 70
      param = "SLOT_ALLOWABLE_ERR"
      device = "fx"
    [talonFx.slot.MaxIAccum]
      type ="talon.param"
      menu = "Max I Accum"
      order = 80
      param = "SLOT_MAX_I_ACCUM"
      device = "fx"
    [talonFx.slot.PeakOutput]
      type = "talon.param"
      menu = "Peak output"
      order = 90
      param = "SLOT_PEAK_OUTPUT"
      device = "fx"
  [talonFx.motion_magic]
    type = "menu"
    order = 22
    menu = "configure motion magic"
    device = "fx"
    [talonFx.motion_magic.cruise_velocity]
      type = "talon.param"
      order = 10
      menu = "motion magic cruise velocity"
      param = "MOTION_CRUISE_VELOCITY"
      device = "fx"
    [talonFx.motion_magic.acceleration]
      type = "talon.param"
      order = 20
      menu = "motion magic acceleration"
      param = "MOTION_ACCELERATION"
      device = "fx"
  [talonFx.current]
    type = "menu"
    order = 23
    menu = "configure current limits"
    [talonFx.current.stator_enabled]
      type = "talon.param"
      order = 10
      menu = "stator current: limit enabled"
      param = "STATOR_CURRENT_LIMIT_ENABLE"
      device = "fx"
    [talonFx.current.stator_limit]
      type = "talon.param"
      order = 20
      menu = "stator current: current limit (A)"
      param = "STATOR_CURRENT_LIMIT"
      device = "fx"
    [talonFx.current.stator_triggerCurrent]
      type = "talon.param"
      order = 30
      menu = "stator current: trigger current (A)"
      param = "STATOR_CURRENT_LIMIT_THRES_CURRENT"
      device = "fx"
      help = "current must exceed this threshold before current limiting occurs. If this number is less than currentLimit than that limit is used as the threshold"
    [talonFx.current.stator_triggerTime]
      type = "talon.param"
      order = 40
      menu = "stator current: trigger time (s)"
      param = "STATOR_CURRENT_LIMIT_THRES_TIME"
      device = "fx"
      help = "current must exceed the threshold for this long before limiting occurs"
    [talonFx.current.supply_enabled]
      type = "talon.param"
      order = 50
      menu = "supply current: limit enabled"
      param = "SUPPLY_CURRENT_LIMIT_ENABLE"
      device = "fx"
    [talonFx.current.supply_limit]
      type = "talon.param"
      order = 60
      menu = "supply current: current limit (A)"
      param = "SUPPLY_CURRENT_LIMIT"
      device = "fx"
    [talonFx.current.supply_triggerCurrent]
      type = "talon.param"
      order = 70
      menu = "supply current: trigger current (A)"
      param = "SUPPLY_CURRENT_LIMIT_THRES_CURRENT"
      device = "fx"
      help = "current must exceed this threshold before limiting occurs. If this number is less than currentLimit, currentLimit is used as the threshold"
    [talonFx.current.supply_triggerTime]
      type = "talon.param"
      order = 80
      menu = "supply current: trigger time (s)"
      param = "SUPPLY_CURRENT_LIMIT_THRES_TIME"
      device = "fx"
      help = "current must exceed the threshold for this long before limiting occurs"
  [talonFx.output]
    type = "menu"
    order = 25
    menu = "configure motor output"
    [talonFx.output.brake]
      type = "talon.brake"
      order = 10
      menu = "brake mode"
      help = "Mode of operation during Neutral output, brake or coast."
      device = "fx"
    [talonFx.output.reversed]
      type = "talon.param"
      order = 20
      menu = "motor output reversed"
      param = "OUTPUT_REVERSED"
      device = "fx"
    [talonFx.output.open-loop_ramp]
      type = "talon.param"
      order = 30
      menu = "open-loop ramp rate"
      param = "OPEN_LOOP_RAMP"
      device = "fx"
    [talonFx.output.closed-loop_ramp]
      type = "talon.param"
      order = 40
      menu = "closed-loop ramp rate"
      param = "CLOSED_LOOP_RAMP"
      device = "fx"
    [talonFx.output.forward_peak_output]
      type = "talon.param"
      order = 50
      menu = "forward peak output"
      param = "PEAK_OUTPUT_FORWARD"
      device = "fx"
    [talonFx.output.reverse_peak_output]
      type = "talon.param"
      order = 60
      menu = "reverse peak output"
      param = "PEAK_OUTPUT_REVERSE"
      device = "fx"
    [talonFx.output.forward_nominal_output]
      type = "talon.param"
      order = 70
      menu = "forward nominal output"
      param = "NOMINAL_OUTPUT_FORWARD"
      device = "fx"
    [talonFx.output.reverse_nominal_output]
      type = "talon.param"
      order = 80
      menu = "reverse nominal output"
      param = "NOMINAL_OUTPUT_REVERSE"
      device = "fx"
    [talonFx.output.neutral_deadband]
      type = "talon.param"
      order = 90
      menu = "neutral deadband"
      param = "NEUTRAL_DEADBAND"
      device = "fx"
    [talonFx.output.motor_commutation]
      type = "talon.commutation"
      order = 100
      menu = "motor commutation"
      device = "fx"
  [talonFx.velocity_measurement]
    type = "menu"
    order = 26
    menu = "configure velocity measurement"
    [talonFx.velocity_measurement.period]
      type = "talon.velocity.period"
     order = 10
      menu = "velocity measurement period"
      device = "fx"
    [talonFx.velocity_measurement.window]
      type = "talon.param"
      order = 20
      menu = "velocity measurement window"
      param = "VELOCITY_MEASUREMENT_WINDOW"
      device = "fx"
  [talonFx.voltage_compensation]
    type = "menu"
    order = 27
    menu = "configure voltage compensation"
    [talonFx.voltage_compensation.enabled]
      type = "talon.param"
      order = 10
      menu = "voltage compensation enabled"
      param = "VOLTAGE_COMP_ENABLE"
      device = "fx"
    [talonFx.voltage_compensation.saturation_voltage]
      type = "talon.param"
      order = 20
      menu = "voltage compensation saturation voltage"
      param = "VOLTAGE_COMP_SATURATION"
      device = "fx"
    [talonFx.voltage_compensation.filter]
      type = "talon.param"
      order = 30
      menu = "voltage compensation measurement filter"
      param = "VOLTAGE_MEASUREMENT_FILTER"
      device = "fx"
  [talonFx.frame]
    type = "menu"
    order = 60
    menu = "configure CAN bus frames"
    [talonFx.frame.grapher]
      type = "default"
      order = 10
      menu = "set grapher defaults"
      device = "fx"
    [talonFx.frame.general]
      type = "talon.param"
      order = 20
      menu = "general status frame"
      param = "STATUS_GENERAL"
      device = "fx"
    [talonFx.frame.feedback_0]
      type = "talon.param"
      order = 30
      menu = "feedback 0 status frame"
      param = "STATUS_FEEDBACK0"
      device = "fx"
    [talonFx.frame.quad_encoder]
      type = "talon.param"
      order = 40
      menu = "quad encoder status frame"
      param = "STATUS_QUAD_ENCODER"
      device = "fx"
    [talonFx.frame.ain_temp_vbat]
      type = "talon.param"
      order = 50
      menu = "ain/temp/vbat status frame"
      param = "STATUS_AIN_TEMP_VBAT"
      device = "fx"
    [talonFx.frame.pulse_width]
      type = "talon.param"
      order = 60
      menu = "pulse width status frame"
      param = "STATUS_PULSE_WIDTH"
      device = "fx"
    [talonFx.frame.motion]
      type = "talon.param"
      order = 70
      menu = "motion status frame"
      param = "STATUS_MOTION"
      device = "fx"
    [talonFx.frame.pidf_0]
      type = "talon.param"
      order = 80
      menu = "PIDF 0 status frame"
      param = "STATUS_PIDF0"
      device = "fx"
  [talonFx.limit]
    type = "menu"
    order = 70
    menu = "configure soft and hard limits"
    [talonFx.limit.forward_hard_source]
      type = "talon.hard.source"
      order = 10
      forward = true
      menu = "forward hard limit source"
      device = "fx"
      help = "Select a limit switch source from the feedback connector, remote Talon SRX, CANifier, or deactivate the feature."
    [talonFx.limit.forward_hard_normal]
      type = "talon.hard.normal"
      order = 20
      forward = true
      menu = "forward hard limit normal"
      device = "fx"
     help = "Select whether this limit switch is normally open, normally closed, or disabled, which overrides the setting from the web-based configuration page."
    [talonFx.limit.reverse_hard_source]
      type = "talon.hard.source"
      order = 30
      forward = false
      menu = "reverse hard limit source"
      device = "fx"
      help = "Select a limit switch source from the feedback connector, remote Talon SRX, CANifier, or deactivate the feature."
    [talonFx.limit.reverse_hard_normal]
      type = "talon.hard.normal"
      order = 40
      forward = false
      menu = "reverse hard limit normal"
      device = "fx"
      help = "Select whether this limit switch is normally open, normally closed, or disabled, which overrides the setting from the web-based configuration page."
    [talonFx.limit.forward_soft_enabled]
      type = "talon.param"
      order = 50
      menu = "forward soft limit enabled"
      param = "SOFT_LIMIT_ENABLE_FORWARD"
      device = "fx"
    [talonFx.limit.forward_soft_threshold]
      type = "talon.param"
      order = 60
      menu = "forward soft limit threshold"
      param = "SOFT_LIMIT_THRESHOLD_FORWARD"
      device = "fx"
    [talonFx.limit.reverse_soft_enabled]
      type = "talon.param"
      order = 70
      menu = "reverse soft limit enabled"
      param = "SOFT_LIMIT_ENABLE_REVERSE"
      device = "fx"
    [talonFx.limit.reverse_soft_threshold]
      type = "talon.param"
      order = 80
      menu = "reverse soft limit threshold"
      param = "SOFT_LIMIT_THRESHOLD_REVERSE"
      device = "fx"
  [talonFx.factory_default]
    type = "talon.param"
    order = 80
    menu = "configure factory defaults"
    param = "FACTORY_DEFAULTS"
    device = "fx"

[servo]
  type = "menu"
  order = 20
  menu = "work with servos"
  [servo.run]
    type = "servo.run"
    order = 10
    menu = "set servo positions"
  [servo.select]
    type = "servo.select"
    order = 20
    menu = "active servos"

[solenoid]
  type = "menu"
  order = 25
  menu = "work with solenoids"
  [solenoid.run]
    type = "solenoid.run"
    order = 10
    menu = "set solenoid positions"
  [solenoid.select]
    type = "solenoid.select"
    order = 20
    menu = "active solenoids"

[digital_output]
  type = "menu"
  order = 30
  menu = "work with digital outputs"
  [digital_output.set]
    type = "digital_output.run"
    order = 10
    menu = "set digital output"
  [digital_output.select]
    type = "digital_output.select"
    order = 20
    menu = "active digital outputs"

[canifier]
  type = "menu"
  order = 40
  menu = "work with a canifier"
  [canifier.select]
    type = "canifier.select"
    order = 10
    menu = "active canifier"
  [canifier.status]
    type = "canifier.status"
    order = 20
    menu = "status of active canifier"
  [canifier.general_inputs]
    type = "canifier.inputs"
    order = 40
    menu = "state of general inputs"
  [canifier.pwm_inputs]
    type = "canifier.pwm_in"
    order = 50
    menu = "state of PWM inputs"
  [canifier.quad]
    type = "canifier.param"
    order = 60
    menu = "quadrature encoder position"
    param = "QUAD_POSITION"
  [canifier.pwm_output]
    type = "canifier.pwm_out"
    order = 70
    menu = "set PWM output"
  [canifier.general_output]
    type = "menu"
    order = 80
    menu = "set general output pins"
    [canifier.general_output.limf]
      type = "default"
      order = 10
      menu = "LIMF"
    [canifier.general_output.limr]
      type = "default"
      order = 20
      menu = "LIMR"
    [canifier.general_output.quad_a]
      type = "default"
      order = 30
      menu = "QUAD A"
    [canifier.general_output.quad_b]
      type = "default"
      order = 40
      menu = "QUAD B"
    [canifier.general_output.quad_idx]
      type = "default"
      order = 50
      menu = "QUAD IDX"
    [canifier.general_output.scl]
      type = "default"
      order = 60
      menu = "SCL"
    [canifier.general_output.sda]
      type = "default"
      order = 70
      menu = "SDA"
    [canifier.general_output.spi_clk_pwm0]
      type = "default"
      order = 80
      menu = "SPI CLK PWM 0"
    [canifier.general_output.spi_cs]
      type = "default"
      order = 90
      menu = "SPI CS"
    [canifier.general_output.spi_miso_pwm2]
      type = "default"
      order = 100
      menu = "SPI MISO PWM 2"
    [canifier.general_output.spi_mosi_pwm1]
      type = "default"
      order = 110
      menu = "SPI MOSI PWM 1"

  [canifier.frame]
    type = "menu"
    order = 90
    menu = "configure CAN bus frames"
    [canifier.frame.grapher]
      type = "default"
      order = 10
      menu = "set grapher defaults"
    [canifier.frame.general_1]
      type = "canifier.param"
      order = 20
      menu = "general 1 status frame"
      param = "STATUS_GENERAL1"
    [canifier.frame.general_2]
      type = "canifier.param"
      order = 30
      menu = "general 2 status frame"
      param = "STATUS_GENERAL2"
    [canifier.frame.pwm_0]
      type = "canifier.param"
      order = 40
      menu = "PWM input 0 status frame"
      param = "STATUS_PWM_INPUTS0"
    [canifier.frame.pwm_1]
      type = "canifier.param"
      order = 50
      menu = "PWM input 1 status frame"
      param = "STATUS_PWM_INPUTS1"
    [canifier.frame.pwm_2]
      type = "canifier.param"
      order = 60
      menu = "PWM input 2 status frame"
      param = "STATUS_PWM_INPUTS2"
    [canifier.frame.pwm_3]
      type = "canifier.param"
      order = 70
      menu = "PWM input 3 status frame"
      param = "STATUS_PWM_INPUTS3"
  [canifier.factory_defaults]
    type = "canifier.param"
    order = 100
    menu = "configure factory defaults"
    param = "FACTORY_DEFAULTS"


[swerve]
  type = "menu"
  order = 50
  menu = "work with swerve"
  [swerve.lock]
    type = "swerve.azimuth"
    order = 10
    menu = "lock azimuth position"
  [swerve.azimuth]
    type = "menu"
    order = 20
    menu = "update azimuth zero positions"
    [swerve.azimuth.save]
      type = "swerve.azimuth.save"
      order = 10
      menu = "save azimuth zero positions"
    [swerve.azimuth.select]
      type = "swerve.azimuth.select"
      order = 20
      menu = "active azimuth"
    [swerve.azimuth.adjust]
      type = "swerve.azimuth.adjust"
      order = 30
      menu = "active azimuth adjustment"

# [dio]
#   type = "menu"
#   order = 20
#   menu = "work with digital I/O"
#   [dio.status]
#     type = "status"
#     order = 10
#     menu = "status of selected digital inputs"
#   [dio.set]
#     type = "command"
#     order = 20
#     menu = "set selected digital output"
